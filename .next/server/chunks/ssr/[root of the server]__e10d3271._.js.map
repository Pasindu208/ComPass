{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/itinerary-generation.ts"],"sourcesContent":["// use server'\n\n/**\n * @fileOverview Generates a personalized travel itinerary based on the destination and preferences.\n *\n * - generateItinerary - A function that generates a travel itinerary.\n * - GenerateItineraryInput - The input type for the generateItinerary function.\n * - GenerateItineraryOutput - The return type for the generateItinerary function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport type { CrowdType } from '@/lib/types';\n\nconst GenerateItineraryInputSchema = z.object({\n  destination: z.string().describe('The destination for the travel itinerary.'),\n  preferences: z.string().describe('The user preferences for the travel itinerary, e.g., interests, budget, travel style.'),\n  crowdType: z.string().describe(\"The type of crowd traveling (e.g., solo, couple, family, friends, business).\") as z.ZodType<CrowdType>,\n  isDayTrip: z.boolean().describe(\"Whether the trip is a single day trip.\"),\n  startDate: z.string().describe(\"The start date of the trip in YYYY-MM-DD format.\"),\n  endDate: z.string().optional().describe(\"The end date of the trip in YYYY-MM-DD format. This will be absent if it's a day trip or if isDayTrip is true.\"),\n});\nexport type GenerateItineraryInput = z.infer<typeof GenerateItineraryInputSchema>;\n\n// Define the schema for a single activity, matching your desired format\nconst ActivitySchema = z.object({\n  name: z.string().describe('The name of the activity or place.'),\n  description: z.string().describe('A brief description of the activity.'),\n  type: z.string().describe('Categories for the activity, e.g., \"market/food stalls/shopping\".'),\n  cost: z.string().describe('Estimated cost for the activity, e.g., \"45$\" or \"Free\".'),\n  arrival_time: z.string().describe('The planned arrival time for the activity, e.g., \"9:00am\".'),\n  departure_time: z.string().describe('The planned departure time for the activity, e.g., \"11:00am\".'),\n});\n\n// Define the schema for a single day's itinerary, matching your desired format\nconst DailyItinerarySchema = z.object({\n  Day: z.number().int().describe('The day number of the trip, starting from 1.'),\n  activities: z.array(ActivitySchema).describe('An array of activities planned for this day.'),\n});\n\n// Update the output schema to use the new JSON structure\nconst GenerateItineraryOutputSchema = z.object({\n  itinerary: z.array(DailyItinerarySchema).describe('The generated travel itinerary, formatted as a JSON array of daily activities.'),\n  suggestedLocations: z.array(z.string().describe(\"A key location, landmark, or address name mentioned in the itinerary that can be plotted on a map. This should be a specific place name or address suitable for geocoding, e.g., 'Eiffel Tower, Paris' or '1600 Amphitheatre Parkway, Mountain View, CA'. Do not include generic terms like 'local markets'.\")).min(1).max(10).describe(\"An array of 1 to 10 key location names or addresses from the itinerary, suitable for plotting on a map.\"),\n});\nexport type GenerateItineraryOutput = z.infer<typeof GenerateItineraryOutputSchema>;\n\nexport async function generateItinerary(input: GenerateItineraryInput): Promise<GenerateItineraryOutput> {\n  return generateItineraryFlow(input);\n}\n\nconst generateItineraryPrompt = ai.definePrompt({\n  name: 'generateItineraryPrompt',\n  input: {schema: GenerateItineraryInputSchema},\n  output: {schema: GenerateItineraryOutputSchema},\n  prompt: `You are a travel expert. Generate a personalized travel itinerary.\n\nDestination: {{{destination}}}\nTraveler Profile Details:\n- Crowd Type: {{crowdType}} (Interpret 'family' as including children. For other types, phrase naturally, e.g., 'a solo traveler' or 'a couple').\nTrip Duration:\n{{#if isDayTrip}}\nThis is a day trip on {{startDate}}.\n{{else}}\nThe trip is from {{startDate}} to {{endDate}}.\n{{/if}}\nUser Preferences: {{{preferences}}}\n\nProvide a detailed itinerary based on this information. **Format the itinerary as a JSON array of daily activities**. Each day should be an object with a \"Day\" number and an \"activities\" array. Each activity object must have \"name\", \"description\", \"type\", \"cost\", \"arrival_time\", and \"departure_time\" fields. Be concise and practical.\n\nItinerary JSON:\n[\n  {\n    \"Day\": <day_number>,\n    \"activities\": [\n      {\n        \"name\": \"<activity_name>\",\n        \"description\": \"<activity_description>\",\n        \"type\": \"<activity_type>\",\n        \"cost\": \"<activity_cost>\",\n        \"arrival_time\": \"<activity_arrival_time>\",\n        \"departure_time\": \"<activity_departure_time>\"\n      },\n      {\n        \"name\": \"<activity_name>\",\n        \"description\": \"<activity_description>\",\n        \"type\": \"<activity_type>\",\n        \"cost\": \"<activity_cost>\",\n        \"arrival_time\": \"<activity_arrival_time>\",\n        \"departure_time\": \"<activity_departure_time>\"\n      }\n    ]\n  },\n  {\n    \"Day\": <day_number>,\n    \"activities\": [\n      {\n        \"name\": \"<activity_name>\",\n        \"description\": \"<activity_description>\",\n        \"type\": \"<activity_type>\",\n        \"cost\": \"<activity_cost>\",\n        \"arrival_time\": \"<activity_arrival_time>\",\n        \"departure_time\": \"<activity_departure_time>\"\n      },\n      {\n        \"name\": \"<activity_name>\",\n        \"description\": \"<activity_description>\",\n        \"type\": \"<activity_type>\",\n        \"cost\": \"<activity_cost>\",\n        \"arrival_time\": \"<activity_arrival_time>\",\n        \"departure_time\": \"<activity_departure_time>\"\n      }\n    ]\n  }\n]\n\nAfter the itinerary JSON, list up to 10 key locations, landmarks, or specific addresses mentioned in the itinerary that would be suitable for plotting on a map. These locations should be specific and geocodable (e.g., \"Louvre Museum, Paris\", \"Golden Gate Bridge, San Francisco\", \"221B Baker Street, London\"). Do not include generic terms like \"a local restaurant\" or \"the beach\".\n\nSuggested Locations for Map:\n[List the suggested locations here, one per line, to be extracted into the suggestedLocations array output field. Ensure these are specific and geocodable.]\n`,\n});\n\nconst generateItineraryFlow = ai.defineFlow(\n  {\n    name: 'generateItineraryFlow',\n    inputSchema: GenerateItineraryInputSchema,\n    outputSchema: GenerateItineraryOutputSchema,\n  },\n  async input => {\n    const {output} = await generateItineraryPrompt(input);\n    console.log('Generated itinerary:', output);\n    return output!;\n  }\n);"],"names":[],"mappings":"AAAA,cAAc;AAEd;;;;;;CAMC;;;AAED;AACA;AAAA;;;AAGA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC1C;AAGA,wEAAwE;AACxE,MAAM,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAEA,+EAA+E;AAC/E,MAAM,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;IAC/B,YAAY,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,gBAAgB,QAAQ,CAAC;AAC/C;AAEA,yDAAyD;AACzD,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sBAAsB,QAAQ,CAAC;IAClD,oBAAoB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,iTAAiT,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,QAAQ,CAAC;AAC3X;AAGO,eAAe,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA4B;IAC5C,QAAQ;QAAC,QAAQ;IAA6B;IAC9C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEX,CAAC;AACD;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,wBAAwB;IAC/C,QAAQ,GAAG,CAAC,wBAAwB;IACpC,OAAO;AACT","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/config.ts"],"sourcesContent":["\n// src/lib/firebase/config.ts\nimport { initializeApp, getApps, getApp, FirebaseApp } from 'firebase/app';\nimport { getAuth, Auth } from 'firebase/auth';\nimport { getFirestore, Firestore } from 'firebase/firestore'; // Uncommented for Firestore\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nlet app: FirebaseApp;\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApp();\n}\n\nconst auth: Auth = getAuth(app);\nconst db: Firestore = getFirestore(app); // Initialized Firestore\n\nexport { app, auth, db }; // Export db\n"],"names":[],"mappings":"AACA,6BAA6B;;;;;;AAC7B;AAAA;AACA;AAAA;AACA,0TAA8D,4BAA4B;AAA1F;;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACf;AAEA,sBAAsB;AACtB,IAAI;AACJ,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACb;AAEA,MAAM,OAAa,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AAC3B,MAAM,KAAgB,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE,MAAM,wBAAwB;;CAEvC,YAAY","debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/firestore.ts"],"sourcesContent":["\n// src/lib/firebase/firestore.ts\n'use server'; // Can be used by server actions if needed, but these are client-callable\n\nimport { db } from './config';\nimport { collection, doc, setDoc, getDocs, deleteDoc, query, orderBy, Timestamp, updateDoc } from 'firebase/firestore';\nimport type { ItineraryData } from '@/lib/types';\n\n/**\n * Saves an itinerary for a specific user to Firestore.\n * Uses the itinerary.id as the document ID.\n */\nexport async function saveItineraryForUser(userId: string, itinerary: ItineraryData): Promise<void> {\n  try {\n    const itineraryDocRef = doc(db, 'users', userId, 'itineraries', itinerary.id);\n    await setDoc(itineraryDocRef, itinerary);\n  } catch (error) {\n    console.error(\"Error saving itinerary to Firestore:\", error);\n    const specificMessage = error instanceof Error ? error.message : \"Unknown Firestore error occurred while saving.\";\n    throw new Error(`Failed to save itinerary: ${specificMessage}`);\n  }\n}\n\n/**\n * Fetches all itineraries for a specific user from Firestore, ordered by creation date (newest first).\n */\nexport async function getUserItineraries(userId: string): Promise<ItineraryData[]> {\n  try {\n    const itinerariesCol = collection(db, 'users', userId, 'itineraries');\n    const q = query(itinerariesCol, orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    \n    return querySnapshot.docs.map(docSnapshot => {\n      const data = docSnapshot.data();\n      return {\n        id: docSnapshot.id,\n        destination: data.destination,\n        preferences: data.preferences,\n        itinerary: data.itinerary,\n        weather: data.weather,\n        createdAt: data.createdAt, \n        crowdType: data.crowdType,\n        startDate: data.startDate,\n        endDate: data.endDate,\n        isDayTrip: data.isDayTrip,\n        suggestedLocations: data.suggestedLocations || [], // Ensure it defaults to an empty array\n      } as ItineraryData;\n    });\n  } catch (error) {\n    console.error(\"Error fetching itineraries from Firestore:\", error);\n    // Propagate a more specific error message\n    const specificMessage = error instanceof Error ? error.message : \"Unknown Firestore error occurred during fetch.\";\n    throw new Error(`Failed to fetch itineraries. Firestore error: ${specificMessage}`);\n  }\n}\n\n/**\n * Deletes a specific itinerary for a user from Firestore.\n */\nexport async function deleteItineraryForUser(userId: string, itineraryId: string): Promise<void> {\n  try {\n    const itineraryDocRef = doc(db, 'users', userId, 'itineraries', itineraryId);\n    await deleteDoc(itineraryDocRef);\n  } catch (error) {\n    console.error(\"Error deleting itinerary from Firestore:\", error);\n    const specificMessage = error instanceof Error ? error.message : \"Unknown Firestore error occurred while deleting.\";\n    throw new Error(`Failed to delete itinerary: ${specificMessage}`);\n  }\n}\n\n/**\n * Updates a specific itinerary for a user in Firestore.\n */\nexport async function updateItineraryForUser(userId: string, itineraryId: string, updatedItineraryData: Partial<ItineraryData>): Promise<void> {\n  try {\n    const itineraryDocRef = doc(db, 'users', userId, 'itineraries', itineraryId);\n    await updateDoc(itineraryDocRef, updatedItineraryData);\n  } catch (error) {\n    console.error(\"Error updating itinerary in Firestore:\", error);\n    const specificMessage = error instanceof Error ? error.message : \"Unknown Firestore error occurred while updating.\";\n    throw new Error(`Failed to update itinerary: ${specificMessage}`);\n  }\n}\n"],"names":[],"mappings":"AACA,gCAAgC;;;;;;;;;AAGhC;AACA;AAAA;;;;;;AAOO,eAAe,uCAAkB,GAAlB,qBAAqB,MAAc,EAAE,SAAwB;IACjF,IAAI;QACF,MAAM,kBAAkB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,gIAAA,CAAA,KAAE,EAAE,SAAS,QAAQ,eAAe,UAAU,EAAE;QAC5E,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,iBAAiB;IAChC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM,kBAAkB,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACjE,MAAM,IAAI,MAAM,CAAC,0BAA0B,EAAE,iBAAiB;IAChE;AACF;AAKO,eAAe,uCAAgB,GAAhB,mBAAmB,MAAc;IACrD,IAAI;QACF,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,gIAAA,CAAA,KAAE,EAAE,SAAS,QAAQ;QACvD,MAAM,IAAI,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,gBAAgB,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,aAAa;QACrD,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QAEpC,OAAO,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA;YAC5B,MAAM,OAAO,YAAY,IAAI;YAC7B,OAAO;gBACL,IAAI,YAAY,EAAE;gBAClB,aAAa,KAAK,WAAW;gBAC7B,aAAa,KAAK,WAAW;gBAC7B,WAAW,KAAK,SAAS;gBACzB,SAAS,KAAK,OAAO;gBACrB,WAAW,KAAK,SAAS;gBACzB,WAAW,KAAK,SAAS;gBACzB,WAAW,KAAK,SAAS;gBACzB,SAAS,KAAK,OAAO;gBACrB,WAAW,KAAK,SAAS;gBACzB,oBAAoB,KAAK,kBAAkB,IAAI,EAAE;YACnD;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAC5D,0CAA0C;QAC1C,MAAM,kBAAkB,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACjE,MAAM,IAAI,MAAM,CAAC,8CAA8C,EAAE,iBAAiB;IACpF;AACF;AAKO,eAAe,uCAAoB,GAApB,uBAAuB,MAAc,EAAE,WAAmB;IAC9E,IAAI;QACF,MAAM,kBAAkB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,gIAAA,CAAA,KAAE,EAAE,SAAS,QAAQ,eAAe;QAChE,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE;IAClB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,MAAM,kBAAkB,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACjE,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,iBAAiB;IAClE;AACF;AAKO,eAAe,uCAAoB,GAApB,uBAAuB,MAAc,EAAE,WAAmB,EAAE,oBAA4C;IAC5H,IAAI;QACF,MAAM,kBAAkB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,gIAAA,CAAA,KAAE,EAAE,SAAS,QAAQ,eAAe;QAChE,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,iBAAiB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,MAAM,kBAAkB,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACjE,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,iBAAiB;IAClE;AACF;;;IAtEsB;IAcA;IAiCA;IAcA;;AA7DA,+OAAA;AAcA,+OAAA;AAiCA,+OAAA;AAcA,+OAAA","debugId":null}},
    {"offset": {"line": 504, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { generateItinerary } from '@/ai/flows/itinerary-generation';\nimport type { GenerateItineraryInput as AIItineraryInput, GenerateItineraryOutput } from '@/ai/flows/itinerary-generation'; // Renamed to avoid conflict\nimport { updateItineraryForUser } from '@/lib/firebase/firestore';\nimport type { ItineraryData, ItineraryGenerationInput } from '@/lib/types';\n\nconst mockWeathers = [\n  \"Sunny, 28°C. Gentle breeze.\",\n  \"Partly cloudy, 22°C. Chance of rain: 10%.\",\n  \"Cloudy, 19°C. Light showers expected in the evening.\",\n  \"Clear skies, 30°C. Perfect beach weather!\",\n  \"Windy, 20°C. Bring a jacket.\",\n];\n\nfunction getRandomWeather(): string {\n  return mockWeathers[Math.floor(Math.random() * mockWeathers.length)];\n}\n\nexport async function runGenerateItineraryAction(\n  input: ItineraryGenerationInput // This type comes from @/lib/types\n): Promise<{ data?: ItineraryData; error?: string }> {\n  try {\n    // The AI flow expects AIItineraryInput which matches structure but might have different Zod specifics\n    const aiInput: AIItineraryInput = {\n      destination: input.destination,\n      preferences: input.preferences,\n      crowdType: input.crowdType,\n      startDate: input.startDate,\n      endDate: input.isDayTrip ? undefined : input.endDate, // Ensure endDate is undefined for day trips for the AI\n      isDayTrip: input.isDayTrip,\n    };\n\n    const result: GenerateItineraryOutput = await generateItinerary(aiInput);\n    \n    if (result.itinerary && result.suggestedLocations) {\n      const itineraryData: ItineraryData = {\n        id: new Date().toISOString(),\n        destination: input.destination,\n        preferences: input.preferences,\n        itinerary: result.itinerary,\n        weather: getRandomWeather(),\n        createdAt: new Date().toISOString(),\n        crowdType: input.crowdType,\n        startDate: input.startDate,\n        endDate: input.isDayTrip ? undefined : input.endDate,\n        isDayTrip: input.isDayTrip,\n        suggestedLocations: result.suggestedLocations, // Added\n      };\n      return { data: itineraryData };\n    }\n    return { error: \"Failed to generate itinerary content or suggested locations.\" };\n  } catch (e) {\n    console.error(\"Error generating itinerary:\", e);\n    const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred during itinerary generation.\";\n    return { error: errorMessage };\n  }\n}\n\nexport async function updateItineraryAction(userId: string, itineraryId: string, updatedItineraryData: Partial<ItineraryData>): Promise<{ success: boolean; error?: string }> {\n  try {\n    await updateItineraryForUser(userId, itineraryId, updatedItineraryData);\n    return { success: true };\n  } catch (e) {\n    return { success: false, error: e instanceof Error ? e.message : \"An unknown error occurred while updating the itinerary.\" };\n  }\n}"],"names":[],"mappings":";;;;;;AAEA;AAEA;;;;;;AAGA,MAAM,eAAe;IACnB;IACA;IACA;IACA;IACA;CACD;AAED,SAAS;IACP,OAAO,YAAY,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,aAAa,MAAM,EAAE;AACtE;AAEO,eAAe,uCAAwB,GAAxB,2BACpB,KAA+B,AAAC,mCAAmC;;IAEnE,IAAI;QACF,sGAAsG;QACtG,MAAM,UAA4B;YAChC,aAAa,MAAM,WAAW;YAC9B,aAAa,MAAM,WAAW;YAC9B,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,SAAS,MAAM,SAAS,GAAG,YAAY,MAAM,OAAO;YACpD,WAAW,MAAM,SAAS;QAC5B;QAEA,MAAM,SAAkC,MAAM,CAAA,GAAA,6IAAA,CAAA,oBAAiB,AAAD,EAAE;QAEhE,IAAI,OAAO,SAAS,IAAI,OAAO,kBAAkB,EAAE;YACjD,MAAM,gBAA+B;gBACnC,IAAI,IAAI,OAAO,WAAW;gBAC1B,aAAa,MAAM,WAAW;gBAC9B,aAAa,MAAM,WAAW;gBAC9B,WAAW,OAAO,SAAS;gBAC3B,SAAS;gBACT,WAAW,IAAI,OAAO,WAAW;gBACjC,WAAW,MAAM,SAAS;gBAC1B,WAAW,MAAM,SAAS;gBAC1B,SAAS,MAAM,SAAS,GAAG,YAAY,MAAM,OAAO;gBACpD,WAAW,MAAM,SAAS;gBAC1B,oBAAoB,OAAO,kBAAkB;YAC/C;YACA,OAAO;gBAAE,MAAM;YAAc;QAC/B;QACA,OAAO;YAAE,OAAO;QAA+D;IACjF,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,eAAe,aAAa,QAAQ,EAAE,OAAO,GAAG;QACtD,OAAO;YAAE,OAAO;QAAa;IAC/B;AACF;AAEO,eAAe,uCAAmB,GAAnB,sBAAsB,MAAc,EAAE,WAAmB,EAAE,oBAA4C;IAC3H,IAAI;QACF,MAAM,CAAA,GAAA,mIAAA,CAAA,yBAAsB,AAAD,EAAE,QAAQ,aAAa;QAClD,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,GAAG;QACV,OAAO;YAAE,SAAS;YAAO,OAAO,aAAa,QAAQ,EAAE,OAAO,GAAG;QAA0D;IAC7H;AACF;;;IA/CsB;IAwCA;;AAxCA,+OAAA;AAwCA,+OAAA","debugId":null}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 663, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}