{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/itinerary-generation.ts"],"sourcesContent":["\n// use server'\n\n/**\n * @fileOverview Generates a personalized travel itinerary based on the destination and preferences.\n *\n * - generateItinerary - A function that generates a travel itinerary.\n * - GenerateItineraryInput - The input type for the generateItinerary function.\n * - GenerateItineraryOutput - The return type for the generateItinerary function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport type { CrowdType } from '@/lib/types';\n\nconst GenerateItineraryInputSchema = z.object({\n  destination: z.string().describe('The destination for the travel itinerary.'),\n  preferences: z.string().describe('The user preferences for the travel itinerary, e.g., interests, budget, travel style.'),\n  crowdType: z.string().describe(\"The type of crowd traveling (e.g., solo, couple, family, friends, business).\") as z.ZodType<CrowdType>,\n  isDayTrip: z.boolean().describe(\"Whether the trip is a single day trip.\"),\n  startDate: z.string().describe(\"The start date of the trip in YYYY-MM-DD format.\"),\n  endDate: z.string().optional().describe(\"The end date of the trip in YYYY-MM-DD format. This will be absent if it's a day trip or if isDayTrip is true.\"),\n});\nexport type GenerateItineraryInput = z.infer<typeof GenerateItineraryInputSchema>;\n\nconst GenerateItineraryOutputSchema = z.object({\n  itinerary: z.string().describe('The generated travel itinerary.'),\n});\nexport type GenerateItineraryOutput = z.infer<typeof GenerateItineraryOutputSchema>;\n\nexport async function generateItinerary(input: GenerateItineraryInput): Promise<GenerateItineraryOutput> {\n  return generateItineraryFlow(input);\n}\n\nconst generateItineraryPrompt = ai.definePrompt({\n  name: 'generateItineraryPrompt',\n  input: {schema: GenerateItineraryInputSchema},\n  output: {schema: GenerateItineraryOutputSchema},\n  prompt: `You are a travel expert. Generate a personalized travel itinerary.\n\nDestination: {{{destination}}}\nTraveler Profile Details:\n- Crowd Type: {{crowdType}} (Interpret 'family' as including children. For other types, phrase naturally, e.g., 'a solo traveler' or 'a couple').\nTrip Duration:\n{{#if isDayTrip}}\nThis is a day trip on {{startDate}}.\n{{else}}\nThe trip is from {{startDate}} to {{endDate}}.\n{{/if}}\nUser Preferences: {{{preferences}}}\n\nProvide a detailed itinerary based on this information. Ensure the output is engaging and practical.\nItinerary:`,\n});\n\nconst generateItineraryFlow = ai.defineFlow(\n  {\n    name: 'generateItineraryFlow',\n    inputSchema: GenerateItineraryInputSchema,\n    outputSchema: GenerateItineraryOutputSchema,\n  },\n  async input => {\n    const {output} = await generateItineraryPrompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":"AACA,cAAc;AAEd;;;;;;CAMC;;;AAED;AACA;AAAA;;;AAGA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC1C;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA4B;IAC5C,QAAQ;QAAC,QAAQ;IAA6B;IAC9C,QAAQ,CAAC;;;;;;;;;;;;;;UAcD,CAAC;AACX;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,wBAAwB;IAC/C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { generateItinerary } from '@/ai/flows/itinerary-generation';\nimport type { GenerateItineraryInput as AIItineraryInput, GenerateItineraryOutput } from '@/ai/flows/itinerary-generation'; // Renamed to avoid conflict\nimport type { ItineraryData, ItineraryGenerationInput } from '@/lib/types';\n\nconst mockWeathers = [\n  \"Sunny, 28°C. Gentle breeze.\",\n  \"Partly cloudy, 22°C. Chance of rain: 10%.\",\n  \"Cloudy, 19°C. Light showers expected in the evening.\",\n  \"Clear skies, 30°C. Perfect beach weather!\",\n  \"Windy, 20°C. Bring a jacket.\",\n];\n\nfunction getRandomWeather(): string {\n  return mockWeathers[Math.floor(Math.random() * mockWeathers.length)];\n}\n\nexport async function runGenerateItineraryAction(\n  input: ItineraryGenerationInput // This type comes from @/lib/types\n): Promise<{ data?: ItineraryData; error?: string }> {\n  try {\n    // The AI flow expects AIItineraryInput which matches structure but might have different Zod specifics\n    const aiInput: AIItineraryInput = {\n      destination: input.destination,\n      preferences: input.preferences,\n      crowdType: input.crowdType,\n      startDate: input.startDate,\n      endDate: input.isDayTrip ? undefined : input.endDate, // Ensure endDate is undefined for day trips for the AI\n      isDayTrip: input.isDayTrip,\n    };\n\n    const result: GenerateItineraryOutput = await generateItinerary(aiInput);\n    \n    if (result.itinerary) {\n      const itineraryData: ItineraryData = {\n        id: new Date().toISOString(),\n        destination: input.destination,\n        preferences: input.preferences,\n        itinerary: result.itinerary,\n        weather: getRandomWeather(),\n        createdAt: new Date().toISOString(),\n        crowdType: input.crowdType,\n        startDate: input.startDate,\n        endDate: input.isDayTrip ? undefined : input.endDate,\n        isDayTrip: input.isDayTrip,\n      };\n      return { data: itineraryData };\n    }\n    return { error: \"Failed to generate itinerary content.\" };\n  } catch (e) {\n    console.error(\"Error generating itinerary:\", e);\n    const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred during itinerary generation.\";\n    return { error: errorMessage };\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAIA,MAAM,eAAe;IACnB;IACA;IACA;IACA;IACA;CACD;AAED,SAAS;IACP,OAAO,YAAY,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,aAAa,MAAM,EAAE;AACtE;AAEO,eAAe,uCAAwB,GAAxB,2BACpB,KAA+B,AAAC,mCAAmC;;IAEnE,IAAI;QACF,sGAAsG;QACtG,MAAM,UAA4B;YAChC,aAAa,MAAM,WAAW;YAC9B,aAAa,MAAM,WAAW;YAC9B,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,SAAS,MAAM,SAAS,GAAG,YAAY,MAAM,OAAO;YACpD,WAAW,MAAM,SAAS;QAC5B;QAEA,MAAM,SAAkC,MAAM,CAAA,GAAA,6IAAA,CAAA,oBAAiB,AAAD,EAAE;QAEhE,IAAI,OAAO,SAAS,EAAE;YACpB,MAAM,gBAA+B;gBACnC,IAAI,IAAI,OAAO,WAAW;gBAC1B,aAAa,MAAM,WAAW;gBAC9B,aAAa,MAAM,WAAW;gBAC9B,WAAW,OAAO,SAAS;gBAC3B,SAAS;gBACT,WAAW,IAAI,OAAO,WAAW;gBACjC,WAAW,MAAM,SAAS;gBAC1B,WAAW,MAAM,SAAS;gBAC1B,SAAS,MAAM,SAAS,GAAG,YAAY,MAAM,OAAO;gBACpD,WAAW,MAAM,SAAS;YAC5B;YACA,OAAO;gBAAE,MAAM;YAAc;QAC/B;QACA,OAAO;YAAE,OAAO;QAAwC;IAC1D,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,eAAe,aAAa,QAAQ,EAAE,OAAO,GAAG;QACtD,OAAO;YAAE,OAAO;QAAa;IAC/B;AACF;;;IArCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}